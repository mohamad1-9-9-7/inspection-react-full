import React, { useEffect, useState, useRef } from "react";

export default function OHCView() {
  const [reports, setReports] = useState([]);
  const [editingIndex, setEditingIndex] = useState(null);
  const [editFormData, setEditFormData] = useState({
    name: "",
    nationality: "",
    job: "",
    branch: "",
    issueDate: "",
    expiryDate: "",
    result: "",
  });
  const [filter, setFilter] = useState("all");
  const [branchFilter, setBranchFilter] = useState("all");
  const fileInputRef = useRef(null);

  const branches = [
    "QCS", "POS 6", "POS 7", "POS 10", "POS 11", "POS 14", "POS 15", "POS 16",
    "POS 17", "POS 19", "POS 21", "POS 24", "POS 25", "POS 37", "POS 38",
    "POS 42", "POS 44", "POS 45",
  ];

  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem("ohc_reports") || "[]");
    setReports(saved);
  }, []);

  // ุชุญููู ุงูุชูุงุฑูุฎ ูุญุณุงุจ ุงูุฃูุงู ุงููุชุจููุฉ (ูุซู ูุง ูู ููุฌูุฏ)

  const convertToISODate = (dateStr) => {
    if (!dateStr) return null;
    if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) return dateStr;
    const parts = dateStr.split("/");
    if (parts.length !== 3) return null;
    const [dd, mm, yyyy] = parts;
    if (dd.length !== 2 || mm.length !== 2 || yyyy.length !== 4) return null;
    return `${yyyy}-${mm}-${dd}`;
  };

  const parseDate = (dateStr) => {
    const isoStr = convertToISODate(dateStr);
    if (!isoStr) return null;
    const d = new Date(isoStr);
    return isNaN(d) ? null : d;
  };

  const getDaysUntilExpiry = (dateStr) => {
    const today = new Date();
    const expiry = parseDate(dateStr);
    if (!expiry) return null;
    const diffTime = expiry.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays >= 0 ? diffDays : 0;
  };

  // ุฏุงูุฉ ุญุฐู ุงูุชูุฑูุฑ
  const handleDelete = (index) => {
    const updated = reports.filter((_, i) => i !== index);
    setReports(updated);
    localStorage.setItem("ohc_reports", JSON.stringify(updated));
    if (editingIndex === index) setEditingIndex(null);
  };

  const handleEditClick = (index) => {
    setEditingIndex(index);
    setEditFormData(reports[index]);
  };

  const handleEditChange = (field, value) => {
    setEditFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleEditSave = () => {
    const updated = [...reports];
    updated[editingIndex] = editFormData;
    setReports(updated);
    localStorage.setItem("ohc_reports", JSON.stringify(updated));
    setEditingIndex(null);
  };

  const handleCancelEdit = () => setEditingIndex(null);

  // ุฏุงูุฉ ุชุตุฏูุฑ ุงูุชูุงุฑูุฑ JSON
  const handleExport = () => {
    const dataStr = JSON.stringify(reports, null, 2);
    const blob = new Blob([dataStr], { type: "application/json" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "ohc_reports_backup.json";
    a.click();
    URL.revokeObjectURL(url);
  };

  // ุฏุงูุฉ ุงุณุชูุฑุงุฏ ุงูุชูุงุฑูุฑ JSON
  const handleImport = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const importedData = JSON.parse(event.target.result);
        if (!Array.isArray(importedData)) {
          alert("ููู ุบูุฑ ุตุงูุญ: ูุฌุจ ุฃู ูุญุชูู ุนูู ูุตูููุฉ ุชูุงุฑูุฑ.");
          return;
        }
        // ุฏูุฌ ูุน ุงูุชูุงุฑูุฑ ุงูุญุงููุฉ
        const mergedReports = [...reports, ...importedData];
        setReports(mergedReports);
        localStorage.setItem("ohc_reports", JSON.stringify(mergedReports));
        alert("ุชู ุงุณุชูุฑุงุฏ ุงูุชูุงุฑูุฑ ุจูุฌุงุญ.");
      } catch {
        alert("ูุดู ูู ูุฑุงุกุฉ ุงูููู ุฃู ุชูุณููู ุบูุฑ ุตุงูุญ.");
      }
    };
    reader.readAsText(file);
    e.target.value = ""; // ููุณูุงุญ ุจุฅุนุงุฏุฉ ุชุญููู ููุณ ุงูููู ูุงุญูุงู
  };

  const filteredReports = reports.filter(report => {
    const daysLeft = getDaysUntilExpiry(report.expiryDate);

    if (filter === "soon" && !(daysLeft > 0 && daysLeft <= 30)) return false;
    if (filter === "expired" && daysLeft !== 0) return false;
    if (branchFilter !== "all" && report.branch !== branchFilter) return false;
    return true;
  });

  return (
    <div style={{ padding: 32, background: "#fff", borderRadius: 12, direction: "rtl", fontFamily: "Cairo, sans-serif" }}>
      <h2 style={{ marginBottom: 16, color: "#2c3e50", fontWeight: "bold" }}>๐ ุชูุงุฑูุฑ ุงููุญุต ุงูุทุจู - OHC</h2>

      {/* ุฃุฒุฑุงุฑ ุงูุชุตุฏูุฑ ูุงูุงุณุชูุฑุงุฏ */}
      <div style={{ marginBottom: 16 }}>
        <button
          onClick={handleExport}
          style={{ marginRight: 12, padding: "8px 16px", backgroundColor: "#2980b9", color: "white", border: "none", borderRadius: 6, cursor: "pointer" }}
        >
          โฌ๏ธ ุชุตุฏูุฑ ุงูุชูุงุฑูุฑ (JSON)
        </button>
        <button
          onClick={() => fileInputRef.current.click()}
          style={{ padding: "8px 16px", backgroundColor: "#27ae60", color: "white", border: "none", borderRadius: 6, cursor: "pointer" }}
        >
          โฌ๏ธ ุงุณุชูุฑุงุฏ ุงูุชูุงุฑูุฑ (JSON)
        </button>
        <input
          ref={fileInputRef}
          type="file"
          accept="application/json"
          onChange={handleImport}
          style={{ display: "none" }}
        />
      </div>

      {/* ุงูููุงุชุฑ */}
      <div style={{ marginBottom: 16, display: "flex", gap: 16, alignItems: "center" }}>
        <label htmlFor="filterSelect" style={{ fontWeight: "bold" }}>ุชุตููุฉ:</label>
        <select
          id="filterSelect"
          value={filter}
          onChange={e => setFilter(e.target.value)}
          style={{ padding: "6px 12px", borderRadius: 6, border: "1px solid #ccc", cursor: "pointer", fontSize: 16 }}
        >
          <option value="all">ูู ุงูุชูุงุฑูุฑ</option>
          <option value="soon">ุงูุชูุงุก ุตูุงุญูุฉ ูุฑูุจ</option>
          <option value="expired">ููุชููุฉ ุงูุตูุงุญูุฉ</option>
        </select>

        <label htmlFor="branchFilter" style={{ fontWeight: "bold" }}>ูุฑุน:</label>
        <select
          id="branchFilter"
          value={branchFilter}
          onChange={e => setBranchFilter(e.target.value)}
          style={{ padding: "6px 12px", borderRadius: 6, border: "1px solid #ccc", cursor: "pointer", fontSize: 16 }}
        >
          <option value="all">ูู ุงููุฑูุน</option>
          {branches.map(branch => <option key={branch} value={branch}>{branch}</option>)}
        </select>
      </div>

      {/* ุชุญุฑูุฑ ุงูุชูุฑูุฑ */}
      {editingIndex !== null && (
        <div style={{ marginBottom: 32, padding: 16, border: "1px solid #ddd", borderRadius: 8, backgroundColor: "#f9f9f9" }}>
          <h3>ุชุนุฏูู ุงูุชูุฑูุฑ ุฑูู {editingIndex + 1}</h3>
          {Object.entries(editFormData).map(([key, value]) => {
            if (key === "result") {
              return (
                <div key={key} style={{ marginBottom: 16 }}>
                  <label style={{ fontWeight: "bold" }}>ูุชูุฌุฉ ุงููุญุต:</label>
                  <select
                    value={value}
                    onChange={e => handleEditChange(key, e.target.value)}
                    style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc" }}
                  >
                    <option value="">-- ุงุฎุชุฑ ุงููุชูุฌุฉ --</option>
                    <option value="ุณููู">ุณููู</option>
                  </select>
                </div>
              );
            }
            if (key === "issueDate" || key === "expiryDate") {
              return (
                <div key={key} style={{ marginBottom: 16 }}>
                  <label style={{ fontWeight: "bold" }}>{key === "issueDate" ? "ุชุงุฑูุฎ ุงูุฅุตุฏุงุฑ" : "ุชุงุฑูุฎ ุงูุงูุชูุงุก"}:</label>
                  <input
                    type="date"
                    value={value}
                    onChange={e => handleEditChange(key, e.target.value)}
                    style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc" }}
                  />
                </div>
              );
            }
            if (key === "branch") {
              return (
                <div key={key} style={{ marginBottom: 16 }}>
                  <label style={{ fontWeight: "bold" }}>ุงููุฑุน:</label>
                  <select
                    value={value}
                    onChange={e => handleEditChange(key, e.target.value)}
                    style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc" }}
                  >
                    <option value="">-- ุงุฎุชุฑ ุงููุฑุน --</option>
                    {branches.map(branch => <option key={branch} value={branch}>{branch}</option>)}
                  </select>
                </div>
              );
            }
            return (
              <div key={key} style={{ marginBottom: 16 }}>
                <label style={{ fontWeight: "bold" }}>
                  {key === "name" ? "ุงูุงุณู" :
                   key === "nationality" ? "ุงูุฌูุณูุฉ" :
                   key === "job" ? "ุงููููุฉ ุงูุญุงููุฉ" :
                   key}:
                </label>
                <input
                  type="text"
                  value={value}
                  onChange={e => handleEditChange(key, e.target.value)}
                  style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc" }}
                />
              </div>
            );
          })}
          <button
            onClick={handleEditSave}
            style={{ marginRight: 16, padding: "8px 16px", backgroundColor: "#27ae60", color: "white", border: "none", borderRadius: 6, cursor: "pointer" }}
          >
            ุญูุธ
          </button>
          <button
            onClick={handleCancelEdit}
            style={{ padding: "8px 16px", backgroundColor: "#7f8c8d", color: "white", border: "none", borderRadius: 6, cursor: "pointer" }}
          >
            ุฅูุบุงุก
          </button>
        </div>
      )}

      {/* ุงูุฌุฏูู */}
      <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 16 }}>
        <thead style={{ background: "#ecf0f1" }}>
          <tr>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>#</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุงูุงุณู</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุงูุฌูุณูุฉ</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุงููููุฉ ุงูุญุงููุฉ</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุงููุฑุน</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุชุงุฑูุฎ ุงูุฅุตุฏุงุฑ</th>
            <th style={{ padding: 10, border: "1px solid #ddd", color: "red" }}>ุชุงุฑูุฎ ุงูุงูุชูุงุก</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ูุชูุฌุฉ ุงููุญุต</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุงูุฃูุงู ุงููุชุจููุฉ</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุงูุญุงูุฉ</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุฅุฌุฑุงุกุงุช</th>
            <th style={{ padding: 10, border: "1px solid #ddd" }}>ุชุนุฏูู</th>
          </tr>
        </thead>
        <tbody>
          {filteredReports.length === 0 ? (
            <tr>
              <td colSpan="12" style={{ textAlign: "center", padding: 16, fontSize: 18 }}>
                ูุง ุชูุฌุฏ ุชูุงุฑูุฑ ุชุทุงุจู ุงูููุชุฑ ุงููุญุฏุฏ.
              </td>
            </tr>
          ) : (
            filteredReports.map((report, index) => {
              const daysLeft = getDaysUntilExpiry(report.expiryDate);
              const isSoon = daysLeft > 0 && daysLeft <= 30;
              const isExpired = daysLeft === 0;

              return (
                <tr key={index} style={{ textAlign: "center", borderBottom: "1px solid #ccc", backgroundColor: isSoon ? "#ffe6e6" : "transparent" }}>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{index + 1}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{report.name}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{report.nationality}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{report.job}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{report.branch || "-"}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{report.issueDate}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd", color: isSoon || isExpired ? "#e74c3c" : "black", fontWeight: isSoon || isExpired ? "bold" : "normal" }}>
                    {report.expiryDate}
                  </td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{report.result}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>{daysLeft !== null ? `${daysLeft} ููู` : "-"}</td>
                  <td style={{ padding: 8, border: "1px solid #ddd", color: isExpired ? "#c0392b" : "#d35400", fontWeight: "bold" }}>
                    {isExpired ? "ููุชูู ุงูุตูุงุญูุฉ" : isSoon ? "ุงูุชูุงุก ุตูุงุญูุฉ ูุฑูุจ" : "-"}
                  </td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>
                    <button
                      onClick={() => {
                        if (window.confirm(`ูู ุฃูุช ูุชุฃูุฏ ูู ุญุฐู ุงูุชูุฑูุฑ ุฑูู ${index + 1}ุ`)) handleDelete(index);
                      }}
                      style={{ padding: "6px 12px", backgroundColor: "#c0392b", color: "white", border: "none", borderRadius: 6, cursor: "pointer", fontSize: 14 }}
                    >
                      ุญุฐู
                    </button>
                  </td>
                  <td style={{ padding: 8, border: "1px solid #ddd" }}>
                    <button
                      onClick={() => handleEditClick(index)}
                      style={{ padding: "6px 12px", backgroundColor: "#2980b9", color: "white", border: "none", borderRadius: 6, cursor: "pointer", fontSize: 14 }}
                    >
                      ุชุนุฏูู
                    </button>
                  </td>
                </tr>
              );
            })
          )}
        </tbody>
      </table>
    </div>
  );
}
